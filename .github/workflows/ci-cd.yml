name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  PYTHON_VERSION: '3.11'
  TESTING: 'true'

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy
        pip install -r requirements.txt

    - name: Run Black (Code Formatter Check)
      run: black --check --line-length 100 app tests

    - name: Run Flake8 (Linter)
      run: flake8 app tests --max-line-length=100 --exclude=__pycache__

    - name: Run MyPy (Type Checker)
      run: mypy app --ignore-missing-imports
      continue-on-error: true

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: trading
          POSTGRES_PASSWORD: trading123
          POSTGRES_DB: trading_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Tests with Coverage
      env:
        DATABASE_URL: postgresql://trading:trading123@localhost:5432/trading_db_test
        REDIS_URL: redis://localhost:6379
        TESTING: true
      run: |
        pytest --cov=app --cov-report=xml --cov-report=term -v

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt

    - name: Run Safety (Dependency Security Check)
      run: safety check --json
      continue-on-error: true

    - name: Run Bandit (Security Linter)
      run: bandit -r app -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload Bandit Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: bandit-report.json

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker Image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: quantitative-trading-engine:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Image
      run: |
        docker-compose -f docker-compose.yml config
        docker-compose build

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, test, security, build-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v3

    - name: Deploy Notification
      run: |
        echo "ðŸš€ Deployment would trigger here"
